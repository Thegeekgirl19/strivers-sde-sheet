package com.trishala.sde_sheet;

import java.util.ArrayList;

/**
 * Pascal's Triangle 3 Variations 1. Find the value at particular row & col - Apply nCr directly but in optimized fashion (move the numerator and denominator by
 * r time) : T.C = O(r)
 * 
 * 2. Find the ith row of pascals traingle - First item of each row will be 1 and after observation you can see next row can be generated by [prev * (row - col)
 * / col], keep appending this to result list : T.C = O(n)
 * 
 * 3. Wrap the above logic under rows loop : T.C = O(n^2)
 * 
 * 
 * 
		1
		1 1
		1 2 1
		1 3 3 1
		1 3 6 3 1 
		1 4 9 9 4 1
 *
 */
public class PascalsTriangle
{
	public static void main(String[] args)
	{
		int row = 5;
		int col = 3;

		int res = 1;
		//        variation 1 solution
		for (int i = 0; i < 2; i++)
		{
			res *= (row - 1 - i);
			res /= (i + 1);
		}
		System.out.println(res);

		//				variation 2
		ArrayList<Integer> resList = new ArrayList<>();
		int prev = 1;
		resList.add(prev);

		for (int col2 = 1; col2 < row; col2++)
		{
			int curr = prev * (row - col2) / col2; // take care of while dividing here - int to int div will give floor value
			resList.add(curr);
			prev = curr;
		}

		System.out.println(resList.toString());

		//		variation 3
		//		for(int row=1; row<=5; row++) {
		//			
		//			ArrayList<Integer> resList = new ArrayList<>();
		//			int prev = 1;
		//			resList.add(prev);
		//			
		//			for (int col2 = 1; col2 < row; col2++)
		//			{
		//				int curr = prev*(row-col2)/col2; // take care of while dividing here - int to int div will give floor value
		//				resList.add(curr);
		//				prev = curr;
		//			}
		//			
		//			System.out.println(resList.toString());
		//		}

	}
}
